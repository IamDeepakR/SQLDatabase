View is a db object which runs an underlying SELECT SQL whenever its executed. It does not take any storage on its own and is like a window to the data stored in tables.
It is also referred to as stored query. 




WHY VIEWS:
1. Views can hide complexity

If you have a query that requires joining several tables, or has complex logic or calculations, you can code all that logic into a view, then select from the view just like you would a table.

2. Views can be used as a security mechanism

A view can select certain columns and/or rows from a table (or tables), and permissions set on the view instead of the underlying tables. This allows surfacing only the data that a user needs to see.

3. Views can simplify supporting legacy code

If you need to refactor a table that would break a lot of code, you can replace the table with a view of the same name. The view provides the exact same schema as the original table, while the actual schema has changed. This keeps the legacy code that references the table from breaking, allowing you to change the legacy code at your leisure.

These are just some of the many examples of how views can be useful


Difference from other db objects:

Cannot define PK/FK other constraints on a view
Cannot create indexes ( in most cases ) 



